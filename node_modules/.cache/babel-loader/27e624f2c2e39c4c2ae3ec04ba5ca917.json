{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithPopup, signInWithEmailAndPassword, GoogleAuthProvider, createUserWithEmailAndPassword, signOut, onAuthStateChanged } from \"firebase/auth\";\nimport { getFirestore, doc, getDoc, setDoc, collection, writeBatch, query, getDocs } from \"firebase/firestore\"; // Your web app's Firebase configuration\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyC5ifbgjhz_ZXeQDWzlDjlPmq4wrhdF0mM\",\n  authDomain: \"react-devshop.firebaseapp.com\",\n  projectId: \"react-devshop\",\n  storageBucket: \"react-devshop.appspot.com\",\n  messagingSenderId: \"99600668251\",\n  appId: \"1:99600668251:web:b70299d68dd52106cf917e\"\n}; // Initialize Firebase\n\ninitializeApp(firebaseConfig);\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const auth = getAuth();\nexport const db = getFirestore(); // creating a collection and documents for shop products\n\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = collection(db, collectionKey);\n  const batch = writeBatch(db);\n  objectsToAdd.forEach(object => {\n    const docRef = doc(collectionRef, object.title.toLowerCase());\n    batch.set(docRef, object);\n  });\n  await batch.commit();\n  console.log(\"done\");\n}; // Getting the products from the firestore\n\nexport const getCategoriesAdnDocumnets = async () => {\n  const collectionRef = collection(db, \"categories\");\n  const q = query(collectionRef);\n  const querySnapshot = await getDocs(q);\n  const categoryMap = querySnapshot.docs.reduce((acc, docSnapshot) => {\n    const {\n      title,\n      items\n    } = docSnapshot.data();\n    acc[title.toLowerCase()] = items;\n    return acc;\n  }, {});\n  return categoryMap;\n}; // Sign In user with google\n\nexport const signInWithGooglePopup = () => signInWithPopup(auth, googleProvider); // Signin the user with email and password\n\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await signInWithEmailAndPassword(auth, email, password);\n}; // SignOut User\n\nexport const SignOutUser = async () => {\n  await signOut(auth);\n}; // Create the user document while sign in / sign up\n\n_c = SignOutUser;\nexport const createUserDocumentFromAuth = async function (userAuth) {\n  let additionalInformation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!userAuth) return;\n  const userDocRef = doc(db, \"users\", userAuth.uid);\n  const userSnapshot = await getDoc(userDocRef); // If user data does not exist\n  // create / set the document with the data from userAuth in my collection\n\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createAt = new Date();\n\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createAt,\n        ...additionalInformation\n      });\n    } catch (error) {\n      console.log(\"error creating the user\", error.message);\n    }\n  } // If user data exists / return userDocRef\n\n\n  return userDocRef;\n}; // Create the user document while sign in / sign up using email and password method\n\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await createUserWithEmailAndPassword(auth, email, password);\n}; // Auth observer\n\nexport const onAuthStateChangedListener = callback => {\n  onAuthStateChanged(auth, callback);\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"SignOutUser\");","map":{"version":3,"sources":["C:/Users/Sudharsan/Downloads/devshop-main/devshop-main/src/utils/firebase/firebase.utils.js"],"names":["initializeApp","getAuth","signInWithPopup","signInWithEmailAndPassword","GoogleAuthProvider","createUserWithEmailAndPassword","signOut","onAuthStateChanged","getFirestore","doc","getDoc","setDoc","collection","writeBatch","query","getDocs","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","googleProvider","setCustomParameters","prompt","auth","db","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","batch","forEach","object","docRef","title","toLowerCase","set","commit","console","log","getCategoriesAdnDocumnets","q","querySnapshot","categoryMap","docs","reduce","acc","docSnapshot","items","data","signInWithGooglePopup","signInAuthUserWithEmailAndPassword","email","password","SignOutUser","createUserDocumentFromAuth","userAuth","additionalInformation","userDocRef","uid","userSnapshot","exists","displayName","createAt","Date","error","message","createAuthUserWithEmailAndPassword","onAuthStateChangedListener","callback"],"mappings":"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","sourcesContent":["import { initializeApp } from \"firebase/app\";\nimport {\n  getAuth,\n  signInWithPopup,\n  signInWithEmailAndPassword,\n  GoogleAuthProvider,\n  createUserWithEmailAndPassword,\n  signOut,\n  onAuthStateChanged,\n} from \"firebase/auth\";\nimport {\n  getFirestore,\n  doc,\n  getDoc,\n  setDoc,\n  collection,\n  writeBatch,\n  query,\n  getDocs,\n} from \"firebase/firestore\";\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: \"AIzaSyC5ifbgjhz_ZXeQDWzlDjlPmq4wrhdF0mM\",\n  authDomain: \"react-devshop.firebaseapp.com\",\n  projectId: \"react-devshop\",\n  storageBucket: \"react-devshop.appspot.com\",\n  messagingSenderId: \"99600668251\",\n  appId: \"1:99600668251:web:b70299d68dd52106cf917e\",\n};\n\n// Initialize Firebase\ninitializeApp(firebaseConfig);\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\",\n});\n\nexport const auth = getAuth();\nexport const db = getFirestore();\n\n// creating a collection and documents for shop products\nexport const addCollectionAndDocuments = async (\n  collectionKey,\n  objectsToAdd,\n) => {\n  const collectionRef = collection(db, collectionKey);\n  const batch = writeBatch(db);\n\n  objectsToAdd.forEach((object) => {\n    const docRef = doc(collectionRef, object.title.toLowerCase());\n    batch.set(docRef, object);\n  });\n\n  await batch.commit();\n  console.log(\"done\");\n};\n\n// Getting the products from the firestore\nexport const getCategoriesAdnDocumnets = async () => {\n  const collectionRef = collection(db, \"categories\");\n  const q = query(collectionRef);\n\n  const querySnapshot = await getDocs(q);\n  const categoryMap = querySnapshot.docs.reduce((acc, docSnapshot) => {\n    const { title, items } = docSnapshot.data();\n    acc[title.toLowerCase()] = items;\n    return acc;\n  }, {});\n\n  return categoryMap;\n};\n\n// Sign In user with google\nexport const signInWithGooglePopup = () =>\n  signInWithPopup(auth, googleProvider);\n\n// Signin the user with email and password\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n\n  return await signInWithEmailAndPassword(auth, email, password);\n};\n\n// SignOut User\nexport const SignOutUser = async () => {\n  await signOut(auth);\n};\n\n// Create the user document while sign in / sign up\nexport const createUserDocumentFromAuth = async (\n  userAuth,\n  additionalInformation = {},\n) => {\n  if (!userAuth) return;\n\n  const userDocRef = doc(db, \"users\", userAuth.uid);\n  const userSnapshot = await getDoc(userDocRef);\n\n  // If user data does not exist\n  // create / set the document with the data from userAuth in my collection\n  if (!userSnapshot.exists()) {\n    const { displayName, email } = userAuth;\n    const createAt = new Date();\n\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createAt,\n        ...additionalInformation,\n      });\n    } catch (error) {\n      console.log(\"error creating the user\", error.message);\n    }\n  }\n\n  // If user data exists / return userDocRef\n  return userDocRef;\n};\n\n// Create the user document while sign in / sign up using email and password method\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\n\n// Auth observer\nexport const onAuthStateChangedListener = (callback) => {\n  onAuthStateChanged(auth, callback);\n};\n"]},"metadata":{},"sourceType":"module"}